pipeline {
    agent any

    environment {
        IMAGE_NAME = "flask-app"
        DOCKERHUB_REPO = "$DOCKER_USERNAME/$IMAGE_NAME"
    }

    stages {
        stage("code-clone") {
            steps {
                git url: "https://github.com/kishorpatil2107/two-tier-flask-app", branch: "master"
            }
        }

        stage("docker-login") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCreds',
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                }
            }
        }

        stage("unit-test") {
            steps {
                sh '''
                    python3 -m venv venv && \
                    . venv/bin/activate && \
                    pip install --upgrade pip && \
                    pip install -r requirements.txt && \
                    pytest -v > test-report.txt || echo "⚠️ No tests found or tests failed"
                '''
                echo "✅ Unit tests executed. Check test-report.txt for results."
                sh 'cat test-report.txt'
            }
        }

        stage("code-build") {
            steps {
                sh "docker build -t $IMAGE_NAME ."
                echo "✅ Code build completed"
            }
        }

        stage("docker-health-check") {
            steps {
                sh "docker run -d --name temp_container $IMAGE_NAME"
                sh "sleep 5"
                sh "docker inspect --format='{{json .State.Health}}' temp_container || echo '⚠️ No healthcheck defined'"
                sh "docker stop temp_container && docker rm temp_container"
            }
        }

        stage("push-to-dockerHub") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCreds',
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh 'docker tag $IMAGE_NAME $DOCKER_USERNAME/$IMAGE_NAME'
                    sh 'docker push $DOCKER_USERNAME/$IMAGE_NAME'
                }
            }
        }

        stage("Deploy") {
            steps {
                sh "docker compose up -d --build"
            }
        }
    }
}
